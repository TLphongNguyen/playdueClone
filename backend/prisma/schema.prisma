datasource db {
  provider = "mysql"
  url      = "mysql://root:28062003@localhost:3306/playerdue"
}
generator client {
  provider = "prisma-client-js"
}
model AccountType {
  accountTypeId Int    @id @default(autoincrement())
  accountTypeName String
  account       Account[]
}
model Account {
  accountId     Int      @id @default(autoincrement())
  username      String
  password      String
  accountTypeId Int
  Salt          String
  accountType   AccountType @relation(fields: [accountTypeId], references: [accountTypeId])
  customers     Customer[]
}
model Customer {
  customerId Int      @id @default(autoincrement())
  accountId  Int      
  fullName   String
  nickname    String
  avt        String
  birthday   DateTime
  email      String
  address    String?
  gender     String?
  money      Int
  status     Int
  account    Account  @relation(fields: [accountId], references: [accountId])
  detailCustomer DetailCustomer?
  comments commentStory[]
  donates donate[]
  story story[]
  recharge recharge[]
  reactionStory reactionStory[] 
  notification Notification[]
  SentMessages     Message[]        @relation("SentMessages")
  ReceivedMessages MessageReceiver[]
  followers follower[]
  rentsAsCustomer rent[]         @relation("CustomerRents")
  rentsAsPlayer   rent[]         @relation("PlayerRents")
   withdrawals withdrawal[]

}
model recharge {
  rechargeId Int @id @default(autoincrement())
  customerId Int
  banks String
  numberBank Int
  amount Int
  dateRecharge DateTime @default(now())
  customer Customer @relation(fields: [customerId], references: [customerId])
}
model withdrawal {
  withdrawalId Int       @id @default(autoincrement())
  customerId   Int
  banks        String   
  numberBank   Int      
  amount       Int       
  dateWithdraw DateTime  @default(now()) 
  status       Int       
  customer     Customer  @relation(fields: [customerId], references: [customerId])
}
model DetailCustomer {
  detailCustomerId Int @id @default(autoincrement())
  customerId Int       @unique
  Abum String @db.Text
  Facebook String?
  highlight String?
  price      Int
  games      GamesOnCustomers[]
  description String
  info String
  mic Boolean
  cam Boolean
  customer Customer @relation(fields: [customerId], references: [customerId])
}
model Games {
  gameId Int @id @default(autoincrement())
  gameName String
  gameImg String @db.VarChar(500)
  DetailCustomer  GamesOnCustomers[]
}
model GamesOnCustomers {
  detailCustomerId Int
  gameId     Int
  DetailCustomer   DetailCustomer @relation(fields: [detailCustomerId], references: [detailCustomerId])
  Game       Games    @relation(fields: [gameId], references: [gameId])

  @@id([detailCustomerId, gameId])
}
model rent {
  rentId      Int      @id @default(autoincrement())
  customerId  Int
  playerId    Int
  hour        Int
  timeRequest DateTime @default(now())
  status      String   @default("pending") // pending, accepted, completed, canceled
  customers   Customer @relation(fields: [customerId], references: [customerId], name: "CustomerRents")
  player      Customer @relation(fields: [playerId], references: [customerId], name: "PlayerRents")
  rentDetails rentDetails[] 
}

model rentDetails {
  rentDetailsId Int      @id @default(autoincrement())
  rentId        Int
  startTime     DateTime
  endTime       DateTime
  totalPrice    Float
  Rating        Int?
  comment       String?
  rents         rent     @relation(fields: [rentId], references: [rentId])
}

model story {
  storyId Int @id @default(autoincrement())
  customerId Int
  urlStory String
  caption String
  hagtag String?
  likes Int @default(0)
  views Int @default(0)
  stautusStory Boolean
  time DateTime @default(now())
  customers Customer @relation(fields: [customerId], references: [customerId])
  commentStory commentStory[]
  reactionStory reactionStory[] 
  @@map("story")
}
enum ReactionType {
  LIKE
  VIEW
}
model reactionStory {
  ReactionId    Int       @id @default(autoincrement())
  storyId       Int
  customerId    Int
  type          ReactionType 
  time          DateTime     @default(now())
  story         story        @relation(fields: [storyId], references: [storyId])
  customer      Customer     @relation(fields: [customerId], references: [customerId])
  @@unique([storyId, customerId, type])
}
model commentStory {
  commentStoryId Int @id @default(autoincrement())
  storyId Int 
  customerId Int 
  content String
  time DateTime @default(now())
  storys story @relation(fields: [storyId],references: [storyId])
  customers Customer @relation(fields: [customerId], references: [customerId])
}
model donate {
  donateId Int @id @default(autoincrement())
  customerId Int
  idDonateTo Int
  des String
  money Int
  customers Customer @relation(fields: [customerId], references: [customerId])
}
model Message {
  messageId   Int       @id @default(autoincrement())
  content     String
  sentAt      DateTime  @default(now())
  readAt      DateTime?
  senderId    Int
  sender      Customer  @relation("SentMessages", fields: [senderId], references: [customerId])
  chatType    ChatType  
  MessageReceiver MessageReceiver[]
}
enum ChatType {
  PRIVATE 
  WORLD   
}
model MessageReceiver {
  id         Int       @id @default(autoincrement())
  messageId  Int
  receiverId Int
  readAt     DateTime?
  message    Message   @relation(fields: [messageId], references: [messageId])
  receiver   Customer  @relation(fields: [receiverId], references: [customerId])
  @@unique([messageId, receiverId])
}

model Notification {
  notificationId Int @id @default(autoincrement())
  customerId Int
  ownerId Int
  typeId Int
  content String
  time DateTime @default(now())
  status Int @default(1)
  TypeNotification TypeNotification @relation(fields: [typeId], references: [typeId])
  customers Customer @relation(fields: [customerId], references: [customerId])
}
model TypeNotification {
  typeId Int @id @default(autoincrement())
  nameNotification String
  notification Notification[]
}
model follower {
  followingID Int @id @default(autoincrement())
  customerId Int
  followerId Int
  time DateTime @default(now())
  customers Customer @relation(fields: [customerId], references: [customerId])

}